#define LENGTH 10

#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
    int *elemPtr;
    int count;
    int max;
} List;

List initialize(List L);
List insertPos(List L, int data, int position);
List deletePos(List L, int position);
int locate(List L, int data);
List  insertSorted(List L, int data);
void display(List L);
List resize(List L);

int main(){
    List L = initialize(L);
    int n;
    
    // printf("Enter how many elements inside the list: ");
    // scanf("%d", &n);
    
    // printf("Enter %d elements: ", n);
    // for (int i = 0; i < n; i++){
    //     scanf("%d", &L.elemPtr[i]);
    //     L.count++;
    // }
    L.elemPtr[0] = 1;
    L.elemPtr[1] = 2;
    L.elemPtr[2] = 3;
    L.elemPtr[3] = 4;
    L.elemPtr[4] = 5;
    L.count = 5;
    printf("Current: \n");
    display(L);
    
    printf("\n== Insert 2 at Position 1 ==\n");
    printf("Before:\n");
    display(L);
    L = insertPos(L, 2, 1);
    printf("After:\n");
    display(L);
    
    printf("\n== Delete at Position 2 ==\n");
    printf("Before:\n");
    display(L);
    L = deletePos(L, 2);
    printf("After:\n");
    display(L);
    
    int idx = locate(L, 3);
    printf("\n== Locate Data 3 ==\n");
    printf("Data 3 is found at position %d\n", idx);
    
    
    return 0;
}

List initialize(List L){
    L.elemPtr = malloc(sizeof(int) * LENGTH);
    L.max = LENGTH;
    L.count = 0;
    return L;
}

List insertPos(List L, int data, int position){
    if (L.count > L.max){
        resize(L);
    }
    
    for (int i = L.count-1; i >= position; i--){
        L.elemPtr[i + 1] = L.elemPtr[i];
    }
    
    L.elemPtr[position] = data;
    L.count++;
    return L;
}

List deletePos(List L, int position){
    for (int i = position; i <= L.count-1; i++){
        L.elemPtr[i] = L.elemPtr[i + 1];
    }
    L.count--;
    return L;
}

int locate(List L, int data){
    for (int i = 0; i < L.count; i++){
        if (data == L.elemPtr[i]){
            return i;
        }
    }
    return -1;
}

List  insertSorted(List L, int data){
    if (L.count > L.max){
        resize(L);
    }
    
    int i = 0;
    while (i < L.count && L.elemPtr[i] < data) i++;
    insertPos(L, data, i);
}

void display(List L){
    printf("\telem: ");
    for (int i = 0;i < L.count; i++){
        printf("%d ", L.elemPtr[i]);
    }
    printf("\n");
    printf("\tcount: %d\n", L.count);
    printf("\tmax: %d", L.max);
    
    printf("\n");
}

List resize(List L){
    int newM = L.max * 2;
    int *tmp = realloc(L.elemPtr, sizeof(int) * LENGTH);
    L.max = newM;
    L.elemPtr = tmp;
    return L;
}
